#! /g/ssli/sw/roylu/bin/python3.7

import json
import argparse
import subprocess
from termcolor import colored
from terminaltables import AsciiTable

from collections import defaultdict

from utils import *
from config import *

curr_hostname = os.environ['HOSTNAME'].split('.')[0]
if curr_hostname not in desktop_hostnames:
    print('[Error]', f'You are on {curr_hostname}. rnode can be only used in your login machine.')
    exit(1)


def run_cmd(args):
    try:
        out = subprocess.Popen(args,
                               stdout=subprocess.PIPE, 
                               stderr=subprocess.PIPE)
    except Exception as e:
        print('[Error]', e)
        exit(1)
    stdout, stderr = out.communicate()
    return stdout.decode("utf-8")


def get_job_info():
    stdout = run_cmd(['condor_status', '-long', '-json'])
    jobid2info = {}
    if stdout:
        try:
            jobs = json.loads(stdout)
        except:
            jobs = []
        for job in jobs:
            info = {}
            if job['Activity'] != "Idle":
                jobid = job['JobId']
                info = {
                    'c': job['Cpus'],
                    'm': f"{int(job['Memory']) / 1024:.1f}",
                    'g': job.get('AssignedGPUs', '').replace('CUDA', ''),
                }

                jobid2info[jobid] = info
    return jobid2info


def get_alloc_info(): 
    stdout = run_cmd(['condor_q', '-run', '-all', '-long', '-global', '-json'])
    hosts = {}
    if stdout:
        try:
            jobs = json.loads(stdout)
        except:
            jobs = []
        for job in jobs:
            hostname = job['RemoteHost'].split('@')[1].split('.')[0]
            if hostname not in hosts:
                hosts[hostname] = host = {'cpu_alloc': 0,
                                          'ram_alloc': 0,
                                          'user2jobid': defaultdict(list)}
                                          #'gpu_used': 0,
            else:
                host = hosts[hostname]
            host['cpu_alloc'] += int(job['RequestCpus'])
            mem_alloc = job['RequestMemory']
            if isinstance(mem_alloc, int):
                host['ram_alloc'] += int(mem_alloc)
            elif 'ImageSize' in job:
                image_size = job['ImageSize']
                host['ram_alloc'] += (image_size + 1) / 1024

            # TODO will be updated while james becomes normal
            #if 'Requestgpus' in job:
            #    host['gpu_used'] += int(job['Requestgpus'])

            user = job['User'].split('@')[0]
            jobid = job['GlobalJobId'].split('#')[1]
            host['user2jobid'][user].append(jobid)
    return hosts

    
def clean_duplicate_nodes(nodes):
    new_nodes = []
    existing_nodes = set()
    for node in nodes:
        node['Hostname'] = hostname = node['Machine'].split('.')[0]
        if hostname not in existing_nodes: 
            existing_nodes.add(hostname)
            new_nodes.append(node)
    return new_nodes, list(existing_nodes)

        
def get_nodes():
    stdout = run_cmd(['condor_status', '-long', '-json'])
    nodes = json.loads(stdout)
    nodes = clean_duplicate_nodes(nodes)
    return nodes


def list_nodes(only_show_gpu=False):
    nodes, _ = get_nodes()
    hosts = get_alloc_info()
    jobid2info = get_job_info()

    #titles = ['Node', 'CPU\nUtil/Alloc/Tot', 'RAM (GB)\nUtil/Alloc/Tot',
    titles = ['Node', 'CPU\nAlloc/Total', 'RAM (GB)\nAlloc/Total',
              'GPU\n     Name     (Â°C)    Util,  Mem (GB)']
    titles.append('User(Job ID)')

    rows = []
    for node in nodes:

        # Do not show cpu machines
        if not only_show_gpu and 'TotalGPUs' not in node:
            continue

        row = []
        node_usage = 0.0 # Max usage

        # Hostname
        hostname = node['Hostname'].split('.')[0]
        host = hosts.get(hostname, {})

        if hostname in offline_hostnames:
            row.append(colored(f'{hostname}(off)', 'grey'))
            rows.append(row)
            continue
        else:
            row.append(hostname)

        gpus = {}
        if hostname in gpu_hostnames:
            try:
                gpus = read_gpu_info(hostname)
            except Exception as e:
                print('[Error]', e)
                exit(1)

        # CPU
        cpu_total = node['TotalCpus']
        cpu_alloc = host.get('cpu_alloc', 0)
        cpu_alloc_ratio = cpu_alloc / cpu_total
        node_usage = max(node_usage, min(0.8, cpu_alloc_ratio))
        cpu_string = '{0} / {1:2}'.format(colored_by_ratio('{0:2}'.format(cpu_alloc), cpu_alloc_ratio), cpu_total)
        row.append(cpu_string)

        # RAM
        ram_total = node['TotalMemory'] / 1024
        ram_alloc = host.get('ram_alloc', 0) / 1024
        ram_alloc_ratio = ram_alloc / ram_total
        node_usage = max(node_usage, ram_alloc_ratio)
        ram_string = '{0} / {1:5.1f}'.format(colored_by_ratio('{0:5.1f}'.format(ram_alloc), ram_alloc_ratio), ram_total)
        row.append(ram_string)

        # GPU
        if gpus:
            gpu_strs = []
            gpu_total = len(gpus)

            occupied_gpu_ids = []
            if 'user2jobid' in host:
                user_and_jobid_string = []
                for jobids in host['user2jobid'].values():
                    for jobid in jobids:
                        info = jobid2info.get(jobid, {})
                        if not info:
                            continue
                        gpu_ids = info['g'].split(',')
                        if gpu_ids:
                            occupied_gpu_ids.extend(gpu_ids)
            occupied_gpu_ids = [int(g) for g in occupied_gpu_ids]
            gpu_used = len(occupied_gpu_ids)

            for gpu_i, gpu in enumerate(gpus):
                gpu_model = simple_gpu_model[gpu['product_name']]
                gpu_mem_util = int(gpu['fb_memory_usage']['used'].split()[0]) / 1024
                gpu_mem_total = int(gpu['fb_memory_usage']['total'].split()[0]) / 1024

                gpu_temp = int(gpu['temperature']['gpu_temp'].split()[0])
                gpu_util = int(gpu['utilization']['gpu_util'].split()[0])
                gpu_temp_str = '--' if gpu_temp < 0 else f'{gpu_temp:2d}'
                gpu_temp_str = colored_by_ratio(gpu_temp_str, gpu_temp / 100, [0.5, 0.8])

                gpu_mem_util_str = ' -- ' if gpu_mem_util < 0 else f'{gpu_mem_util:4.1f}'
                gpu_util_str = ' --' if gpu_util < 0 else f'{gpu_util:3}'

                if gpu_i in occupied_gpu_ids:
                    gpu_str = (
                        f'{colored(f"{gpu_model:12}", "red")}'
                        f'({gpu_temp_str}) '
                        f'{thres_red(gpu_util_str, gpu_util if gpu_util >= 0 else 100, 5)}%, '
                        f'{thres_red(gpu_mem_util_str, gpu_mem_util if gpu_mem_util >= 0 else 100, 0.1)} / '
                        f'{gpu_mem_total:4.1f}'
                    )
                else:
                    gpu_str = (
                        f'{colored(f"{gpu_model:12}", "green")} '
                        f'({gpu_temp_str}) '
                        f'{"":13}'
                        f'{gpu_mem_total:4.1f}'
                    )

                gpu_strs.append(gpu_str)

            gpu_ratio = 0.0 if gpu_total == 0 else gpu_used / gpu_total
            node_usage = max(node_usage, gpu_ratio)

            gpus_string = '\n'.join(gpu_strs)
            row.append(gpus_string)
        else:
            row.append("")

        # Users
        # TODO
        # Add user occupies which GPU
        if 'user2jobid' in host:
            user_and_jobid_string = []
            for user, jobids in host['user2jobid'].items():
                jobid_string = []
                for jobid in jobids:
                    info = jobid2info[jobid]
                    tmp = []
                    tmp.append(f"c:{info['c']}")
                    tmp.append(f"m:{info['m']}")
                    if info['g']:
                        gpu = sorted([int(g) for g in info['g'].split(',')])
                        if len(gpu) > 1 and (list(range(min(gpu), max(gpu)+1)) == gpu):
                            gpu = f'{min(gpu)}-{max(gpu)}'
                        elif len(gpu) == 1:
                            gpu = f'{gpu[0]}'
                        else:
                            gpu = ','.join([str(g) for g in gpu])
                        tmp.append(f"g:{gpu}")
                    info_string = f'{jobid}: [' + ';'.join(tmp) + ']'
                    jobid_string.append(info_string)

                    #jobid_string.append(', '.join(jobids[i:i+2]))
                jobid_string = '\n'.join(jobid_string)
                user_and_jobid_string.append(f'{user}({jobid_string})')
            user_and_jobid_string = '\n'.join(user_and_jobid_string)
            row.append(user_and_jobid_string)

        row[0] = colored_by_ratio(row[0], node_usage)
        rows.append(row)

    table = AsciiTable([titles] + rows)
    for i in range(len(titles)):
        table.justify_columns[i] = 'center'
    table.justify_columns[4] = 'left'  # User list
    print(table.table)

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        prog='roynode',
        description='Show stats of cluster nodes.',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
    )
    parser.add_argument(
        '-g', '--gpu', dest='only_show_gpu', action='store_false',
        help='Only show GPU machines.'
    )
    parser.add_argument(
        '-u', '--users', dest='show_users', action='store_true',
        help='[Disable] The default will show users on each node. No need to use the argument anymore.'
    )
    parser.add_argument(
        '-n', '--nodes', dest='nodes', action='store_true',
        help='Get node names in a single string splited by comma.'
    )

    args = parser.parse_args()

    if not args.nodes:
        list_nodes(only_show_gpu=args.only_show_gpu)
        if args.show_users:
            print(f'{colored("[Update]", "yellow")} '
                  f'No need to add -u to show user information anymore. '
                  f'The default will show user information.')
    else:
        print(','.join(get_nodes()[1]))
